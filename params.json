{
  "name": "Typescript Hero",
  "tagline": "VSCode extension that aids you with your everyday work around typescript",
  "body": "# TypeScript Hero\r\n\r\nTypeScript Hero is a vscode extension that makes your live easier.\r\nWhen you are coding a lot of `TypeScript` you may want vscode to automatically\r\ninclude your imports.\r\n\r\nIf you search for this feature: here's the solution (and many more). Typescript hero will be extended\r\nin the future and there are many features in the pipeline that will enhance the way you\r\nwork with typescript.\r\n\r\n## Features at a glance\r\n\r\nHere is a brief list, of what TypeScript Hero is capable of:\r\n\r\n- Add imports of your project or libraries to your current file\r\n- Add an import for the current name under the cursor\r\n- Add all missing imports of a file with one command\r\n- Intellisense that suggests symbols and automatically adds the needed imports\r\n- \"Light bulb feature\" that fixes code you wrote (aka adds imports if you missed them, more to come.)\r\n- Sort and organize your imports (sort and remove unused)\r\n- Restart your debug session when your code changes\r\n\r\n##### Some badges :-)\r\n\r\n[![Travis](https://img.shields.io/travis/buehler/typescript-hero.svg)](https://travis-ci.org/buehler/typescript-hero)\r\n[![Marketplace](http://vsmarketplacebadge.apphb.com/version-short/rbbit.typescript-hero.svg)](https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero)\r\n[![Installs](http://vsmarketplacebadge.apphb.com/installs/rbbit.typescript-hero.svg)](https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero)\r\n[![GitHub issues](https://img.shields.io/github/issues/buehler/typescript-hero.svg)](https://github.com/buehler/typescript-hero/issues)\r\n[![GitHub pull requests](https://img.shields.io/github/issues-pr/buehler/typescript-hero.svg)](https://github.com/buehler/typescript-hero/pulls)\r\n[![license](https://img.shields.io/github/license/buehler/typescript-hero.svg)](https://github.com/buehler/typescript-hero)\r\n\r\n## Commands\r\n\r\nAll commands are preceeded by `typescriptHero`.\r\n\r\n| Command                      | Extension part  | Description                                               |\r\n| ---------------------------- | --------------- | --------------------------------------------------------- |\r\n| showCmdGui                   | general         | Shows a small gui with all available internal commands    |\r\n| resolve.addImport            | import resolver | Shows a pick list with all recognized, importable symbols |\r\n| resolve.addImportUnderCursor | import resolver | Imports the symbol under the cursor                       |\r\n| resolve.addMissingImports    | import resolver | Imports all missing symbols for the actual document       |\r\n| resolve.organizeImports      | import resolver | Removes unused imports and orders all imports             |\r\n| resolve.rebuildCache         | import resolver | Rebuilds the whole symbol cache (or index)                |\r\n| restartDebugger.toggle       | debug restarter | Toggles the active state of the debug restarter           |\r\n\r\n## Keybindings\r\n\r\nThe following commands are bound by default when the extension is installed.\r\n\r\n| Command                      | Keybinding         |\r\n| ---------------------------- | ------------------ |\r\n| showCmdGui                   | `ctrl+alt+g`       |\r\n| resolve.addImport            | `ctrl+alt+i`       |\r\n| resolve.addImportUnderCursor | `ctrl+alt+shift+i` |\r\n| resolve.organizeImports      | `ctrl+alt+o`       |\r\n\r\n## Settings\r\n\r\nIn the following tables, all possible settings are explained. If you find any\r\nsettings that are not listed here, that means they are \"beta\" or \"not implemented yet\".\r\n\r\nAll settings are preceeded by `typescriptHero`.\r\n\r\n### General\r\n\r\nThese settings do not have a prefix.\r\n\r\n| Setting   | Description                                                                |\r\n| --------- | -------------------------------------------------------------------------- |\r\n| verbosity | The log level that the extension writes its messages to the output channel |\r\n\r\n### Import resolver\r\n\r\nThe following settings do have the prefix `resolver`. So an example setting could be\r\n`typescriptHero.resolver.pathStringDelimiter`.\r\n\r\n| Setting                               | Description                                                                          |\r\n| ------------------------------------- | ------------------------------------------------------------------------------------ |\r\n| pathStringDelimiter                   | The string delimiter to use for the imports                                          |\r\n| ignorePatterns                        | If any of these strings is part of a file path, the file is ignored                  |\r\n| insertSpaceBeforeAndAfterImportBraces | If the extension should place spaces into import braces (`{Symbol}` vs `{ Symbol }`) |\r\n| multiLineWrapThreshold                | The threshold, when imports are converted into multiline imports                     |\r\n| newImportLocation                     | The location of new imports (at the top of the file, or at the cursor location)      |\r\n\r\n### Debug session restarter\r\n\r\nThe following settings do have the prefix `restartDebugger`. So an example setting could be\r\n`typescriptHero.restartDebugger.watchFolders`.\r\n\r\n| Setting      | Description                                                 |\r\n| ------------ | ----------------------------------------------------------- |\r\n| watchFolders | Which output folders should be watched to trigger a restart |\r\n| active       | If true, the debug restart is activated on startup          |\r\n\r\n## Known Issues\r\n\r\nPlease visit [the issue list](https://github.com/buehler/typescript-hero/issues) :-)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}